<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Build Apps on Nym Docs</title><link>https://nymtech.net/docs/build-apps/</link><description>Recent content in Build Apps on Nym Docs</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="https://nymtech.net/docs/build-apps/index.xml" rel="self" type="application/rss+xml"/><item><title>Choose a client</title><link>https://nymtech.net/docs/build-apps/choose-a-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nymtech.net/docs/build-apps/choose-a-client/</guid><description>In the previous section, we got a general overview of the application flow when you&amp;rsquo;re building Nym-enabled apps. Now it&amp;rsquo;s time to understand a bit about how to structure your app by choosing a Nym client.
Understanding Nym clients A large proportion of the Nym mixnet&amp;rsquo;s functionality is implemented client-side, including:
determining network topology - what mixnodes exist, what their keys are, etc. registering with a gateway authenticating to a gateway receiving and decrypting messages from the gateway creation of layer-encrypted Sphinx packets sending Sphinx packets with real messages sending Sphinx packet cover traffic when no real messages are being sent In the next few sections we will discuss how to integrate Nym clients into your apps.</description></item><item><title>Websocket client</title><link>https://nymtech.net/docs/build-apps/websocket-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nymtech.net/docs/build-apps/websocket-client/</guid><description>The Nym Websocket Client was built in the building nym section. If you haven&amp;rsquo;t yet built Nym and want to run the code on this page, go there first.
From inside the nym directory, the nym-client binary got built to the ./target/release/ directory. You can run it like this (or add it to your $PATH):
./nym-client
$ ./nym-client _ __ _ _ _ __ ___ | &amp;#39;_ \| | | | &amp;#39;_ \ _ \ | | | | |_| | | | | | | |_| |_|\__, |_| |_| |_| |___/ (client - version 0.</description></item><item><title>Webassembly client</title><link>https://nymtech.net/docs/build-apps/wasm-client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nymtech.net/docs/build-apps/wasm-client/</guid><description>The Nym webassembly client allows any webassembly-capable runtime to build and send Sphinx packets to the Nym network.
You can install @nymproject/nym-client-wasm from NPM from its package page, or
npm i @nymproject/nym-client-wasm The nym-client-wasm package allows easy creation of Sphinx packets from within mobile apps and browser-based client-side apps (including Electron or similar). Browser extensions should also work.
The webassembly client lets you deliver web apps that build and send Sphinx packets solely in a web browser window.</description></item><item><title>Demos</title><link>https://nymtech.net/docs/build-apps/demos/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://nymtech.net/docs/build-apps/demos/</guid><description>We have included code examples for multiple languages inside the clients/native/examples directory within our codebase - you can see how to connect and send messages from Go, Python, Rust, and JavaScript there.
It may also be worth running the webassembly example code in clients/webassembly/js-example if you&amp;rsquo;re planning to run your using browser or other js technology.</description></item></channel></rss>